job "prometheus" {
  region      = var.region
  datacenters = var.datacenters_dc1
  type        = "service"

  meta {
  version = "2"
  }

  constraint {
    attribute = "${meta.shared_mount}"
    operator  = "="
    value     = "true"
  }

  group "monitoring" {
    count = 1

    network {
      port "http" {
        host_network = "tailscale"
        static = "9090"
      }
    }

    task "prometheus" {
      driver = "docker"

      service {
        name = "prometheus"
        port = "http"
        tags = [
          "traefik.enable=true",
          "traefik.http.middlewares.httpsRedirect.redirectscheme.scheme=https",
          "traefik.http.routers.${NOMAD_TASK_NAME}_insecure.middlewares=httpsRedirect",
          "traefik.http.routers.${NOMAD_TASK_NAME}_insecure.rule=Host(`${NOMAD_TASK_NAME}${var.tld}`)",
          "traefik.http.routers.${NOMAD_TASK_NAME}.tls.domains[0].sans=${NOMAD_TASK_NAME}${var.tld}",
          "traefik.http.routers.${NOMAD_TASK_NAME}.tls.certresolver=sample",
          "traefik.http.middlewares.malpotAuth.basicauth.users=${var.auth}",
          "traefik.http.routers.${NOMAD_TASK_NAME}.middlewares=httpsRedirect, malpotAuth"
        ]

        check {
          type     = "http"
          path     = "/-/healthy"
          name     = "http"
          interval = "5s"
          timeout  = "2s"
        }
      }

      # main configuration file
      template {
        data = <<EOH
global:
  scrape_interval:     60s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 60s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'metrics'
    scrape_interval: 5s
    metrics_path: /metrics
    consul_sd_configs:
      - server: '{{ env "NOMAD_IP_http" }}:8500'
        tags: ['metrics']
        scheme: http
    relabel_configs:
      - source_labels: ['__meta_consul_dc']
        target_label:  'dc'
      - source_labels: [__meta_consul_service]
        target_label:  'job'
      - source_labels: ['__meta_consul_node']
        target_label:  'host'
      - source_labels: ['__meta_consul_tags']
        target_label: 'tags'
      - source_labels: ['__meta_consul_tags']
        regex: '.*job-(.*?)(,.*)'
        replacement: '${1}'
        target_label: 'job_name'

  - job_name: 'consul-server'
    scrape_interval: 10s
    metrics_path: /v1/agent/metrics
    honor_labels: true
    params:
      format: ['prometheus']
    consul_sd_configs:
      - server: '{{ env "NOMAD_IP_http" }}:8500'
        services: ['consul-agent']
        scheme: http
    relabel_configs:
      - source_labels: ['__meta_consul_dc']
        target_label:  'dc'
      - source_labels: ['__meta_consul_node']
        target_label:  'host'
      - source_labels: ['__meta_consul_tags']
        target_label: 'tags'

  - job_name: 'hass'
    scrape_interval: 60s
    metrics_path: /api/prometheus

    # Long-Lived Access Token
    authorization:
      credentials: ${var.hass_key}

    scheme: http
    static_configs:
      - targets: ['{{ env "NOMAD_IP_http" }}:8123']

  - job_name: 'nomad'
    consul_sd_configs:
    - server: '{{ env "NOMAD_IP_http" }}:8500'
      services: ['nomad-client', 'nomad']
      tags: ['http']
      scheme: http
    scrape_interval: 10s
    metrics_path: /v1/metrics
    params:
      format: ['prometheus']
    relabel_configs:
      - source_labels: ['__meta_consul_dc']
        target_label:  'dc'
      - source_labels: [__meta_consul_service]
        target_label:  'job'
      - source_labels: ['__meta_consul_node']
        target_label:  'host'

#  - job_name: 'blackbox_http_2xx'
#    metrics_path: /probe
#    scheme: http
#    scrape_interval: 30s
#    scrape_timeout: 10s
#    params:
#      module: [ http_2xx ]
#    static_configs:
#      - targets:
#        - https://www.google.com/
#        - http://prometheus.homelab/
#    relabel_configs:
#      - source_labels: ['__address__']
#        regex: 'https?://(.+?)(/.*)'
#        replacement: '${1}'
#        target_label: 'url'
#      - source_labels: ['__param_target']
#        target_label: 'instance'
#      - source_labels: [__address__]
#        target_label: __param_target
#      - target_label: __address__
#        replacement: blackbox-exporter.service.[[ .region ]]:9115
#      - source_labels: ['__param_target']
#        target_label: 'endpoint'
#
#  - job_name: 'dns_google_com' 
#    metrics_path: /probe   
#    params:                
#      module: [dns_google_com]                                                                 
#    static_configs:        
#      - targets:           
#        - 8.8.8.8
#        - 1.1.1.1
#        labels:                            
#          dc: '[[ .datacenter ]]'        
#          region: '[[ .region ]]'        
#    relabel_configs:       
#      - source_labels: [__address__] 
#        target_label: __param_target 
#      - source_labels: [__param_target] 
#        target_label: instance 
#      - target_label: __address__ 
#        replacement: blackbox-exporter.service.[[ .region ]]:9115

EOH

        destination   = "local/prometheus.yml"
        change_mode   = "signal"
        change_signal = "SIGHUP"
        env           = false
      }

      config {
        image = "prom/prometheus"
        network_mode = "host"
        args = ["--config.file", "/local/prometheus.yml", "--storage.tsdb.path", "/opt/prometheus", "--web.listen-address", "0.0.0.0:9090", "--storage.tsdb.retention.time", "900d"]
        force_pull = true
        ports = ["http"]
        volumes = [
          "${var.shared_dir}prometheus:/opt/prometheus",
        ]
      }

      resources {
        cpu    = 1600
        memory = 4096
      }
    }
  }
}

variable "datacenters_dc1" {
    type = list(string)
}

variable "region" {}
variable "tld" {}
variable "shared_dir" {}
variable "auth" {}
variable "hass_key" {}
