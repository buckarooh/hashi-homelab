job "alertmanager" {
  region      = var.region
  datacenters = var.datacenters_all
  type = "service"

  meta {
    version = "1"
  }


  update {
    stagger      = "10s"
    max_parallel = 1
  }

  group "alerting" {
    ephemeral_disk {
      sticky = true
    }
    count = 1
    task "alertmanager" {
      driver = "docker"
     
      service {
         tags = ["alertmanager", "net-internal"]
         name = "alertmanager"
         port = "http"

         check {
           type     = "tcp"
           port     = "http"
           interval = "10s"
           timeout  = "2s"
        }
      }

      config {
        image = "prom/alertmanager:latest"
        network_mode = "host"
        force_pull = true
        args = ["--web.external-url", "http://alertmanager.[[ .region ]]lab", "--config.file", "/local/config.yml", "--storage.path", "/local/alertmanager", "--web.listen-address", "0.0.0.0:9093"]
      }

      template {
        data = <<EOH
global:
  smtp_smarthost: 'localhost:25'
  smtp_from: 'alertmanager@example.org'
  smtp_auth_username: 'alertmanager'
  smtp_auth_password: 'password'

route:
  receiver: 'email'
  group_by: ['alertname', 'cluster', 'service', 'service_name', 'service_id']
  group_wait: 30s
  group_interval: 30s
  repeat_interval: 3h

#  routes:
#  - match_re:
#      sendto: pushover 
#    group_wait: 5m
#    group_interval: 5m
#    repeat_interval: 5m
#    receiver: 'pushover' 
#    continue: false
#  - match_re:
#      sendto: slack
#    group_wait: 5m
#    group_interval: 5m
#    repeat_interval: 5m
#    receiver: 'slack'
#    continue: true
#  - match_re:
#      service_name: ^.*
#    group_wait: 5m
#    group_interval: 1h
#    repeat_interval: 1h 
#    receiver: 'default' 
#    continue: true

receivers:
- name: 'email'
  email_configs:
  - to: 'email@example.org'
EOH

        destination = "local/config.yml"
        env         = false
        left_delimiter  = "{{{{"
        right_delimiter = "}}}}"
      }

      resources {
        cpu    = 20
        memory = 24
       
        network {
          port "http" { static = 9093 }
        }
      }
    }

  }
}

variable "region" {
    type = string
}

variable "datacenters_all" {
    type = list(string)
}
